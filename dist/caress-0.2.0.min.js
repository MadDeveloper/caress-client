((root,factory)=>{if(typeof define==="function"&&define.amd){define(["underscore","socket.io-client"],function(_,io){return(root.Caress=factory(_,io))})}else if(typeof module==="object"&&module.exports){module.exports=factory(require("underscore"),require("socket.io-client"))}else{root.Caress=factory(root._,root.io)}})(typeof self!=="undefined"?self:this,(_,io)=>{const Caress={};Caress.version="0.2.0";Caress.protocol="1.1";const Client=(Caress.Client=function Client(options={}){this.host=options.host||"127.0.0.1";this.port=options.port||5000;this.connected=!1;this.sessions={};this.cursors={};this.objects={};this.blobs={};this.touches={};this.touchList=createTouchList();_.bindAll(this,"connect","onConnect","onDisconnect","processPacket","processMessage","processCursorSource","processObjectSource","processBlobSource","processCursorAlive","processObjectAlive","processBlobAlive","processCursorSet","processObjectSet","processBlobSet","processFseq")});Client.prototype.connect=function(){this.socket=io.connect(`http://${this.host}:${this.port}`);this.socket.on("connect",this.onConnect);this.socket.on("disconnect",this.onDisconnect)};Client.prototype.onConnect=function(){this.connected=!0;this.socket.on("tuio",this.processPacket);console.log("Connected to Socket.io")};Client.prototype.onDisconnect=function(){this.connected=!1;for(let namespace in this.touches){for(let touch in this.touches[namespace]){const cancelledTouch=this.touches[namespace][touch];delete this.touches[namespace][touch];this.createTouchEvent("touchcancel",cancelledTouch)}}
this.touches={};this.cursors={};this.objects={};this.blobs={};console.log("Disconnected from Socket.io")};Client.prototype.processPacket=function(packet){if(packet.bundle){this.processMessage(packet)}else{}};Client.prototype.processMessage=function(packet){const cursorTypes={source:this.processCursorSource,alive:this.processCursorAlive,set:this.processCursorSet,fseq:this.processFseq};const objectTypes={source:this.processObjectSource,alive:this.processObjectAlive,set:this.processObjectSet,fseq:this.processFseq};const blobTypes={source:this.processBlobSource,alive:this.processBlobAlive,set:this.processBlobSet,fseq:this.processFseq};if(!packet.duplicate){packet.source="localhost";for(let message in packet.messages){const key=packet.messages[message].type;switch(packet.messages[message].profile){case "/tuio/2Dcur":case "/tuio/25Dcur":case "/tuio/3Dcur":cursorTypes[key](packet,packet.messages[message]);break;case "/tuio/2Dobj":case "/tuio/25Dobj":case "/tuio/3Dobj":objectTypes[key](packet,packet.messages[message]);break;case "/tuio/2Dblb":case "/tuio/25Dblb":case "/tuio/3Dblb":blobTypes[key](packet,packet.messages[message]);break}}}};Client.prototype.processCursorSource=function(packet,message){packet.source=message.address;if(this.cursors[packet.source]===undefined){this.cursors[packet.source]={}}
if(this.touches[packet.source]===undefined){this.touches[packet.source]={}}};Client.prototype.processObjectSource=function(packet,message){packet.source=message.address;if(this.objects[packet.source]===undefined){this.objects[packet.source]={}}
if(this.touches[packet.source]===undefined){this.touches[packet.source]={}}};Client.prototype.processBlobSource=function(packet,message){packet.source=message.address;if(this.blobs[packet.source]===undefined){this.blobs[packet.source]={}}
if(this.touches[packet.source]===undefined){this.touches[packet.source]={}}};Client.prototype.processCursorAlive=function(packet,message){if(this.cursors[packet.source]===undefined){this.cursors[packet.source]={}}
if(this.touches[packet.source]===undefined){this.touches[packet.source]={}}
const activeCursors=_.map(message.sessionIds,id=>id.toString());const notActiveCursors=_.difference(_.keys(this.cursors[packet.source]),activeCursors);const notActiveCursorsLength=notActiveCursors.length;for(let i=0;i<notActiveCursorsLength;i++){const key=notActiveCursors[i];const touch=this.touches[packet.source][key];if(touch!==undefined){delete this.touches[packet.source][key];delete this.cursors[packet.source][key];this.createTouchEvent("touchend",touch)}}};Client.prototype.processObjectAlive=function(packet,message){if(this.objects[packet.source]===undefined){this.objects[packet.source]={}}
if(this.touches[packet.source]===undefined){this.touches[packet.source]={}}
const activeObjects=_.map(message.sessionIds,id=>id.toString());const notActiveObjects=_.difference(_.keys(this.objects[packet.source]),activeObjects);const notActiveObjectsLength=notActiveObjects.length;for(let i=0;i<notActiveObjectsLength;i++){const key=notActiveObjects[i];const touch=this.touches[packet.source][key];if(touch!==undefined){delete this.touches[packet.source][key];delete this.objects[packet.source][key];this.createTouchEvent("touchend",touch)}}};Client.prototype.processBlobAlive=function(packet,message){if(this.blobs[packet.source]===undefined){this.blobs[packet.source]={}}
if(this.touches[packet.source]===undefined){this.touches[packet.source]={}}
const activeBlobs=_.map(message.sessionIds,id=>id.toString());const notActiveBlobs=_.difference(_.keys(this.blobs[packet.source]),activeBlobs);const notActiveBlobsLength=notActiveBlobs.length;for(let i=0;i<notActiveBlobsLength;i++){const key=notActiveBlobs[i];const touch=this.touches[packet.source][key];if(touch!==undefined){delete this.touches[packet.source][key];delete this.blobs[packet.source][key];this.createTouchEvent("touchend",touch)}}};Client.prototype.processCursorSet=function(packet,message){const cursor=new TuioCursor(message);const touch=cursor.coherceToTouch();const id=message.sessionId.toString();if(this.cursors[packet.source][id]!==undefined&&this.cursors[packet.source][id].sessionId.toString()===id){this.cursors[packet.source][id]=cursor;if(this.touches[packet.source][id]!==undefined&&this.touches[packet.source][id].identifier.toString()===id){this.touches[packet.source][id]=touch;this.createTouchEvent("touchmove",touch);return}
return}
this.cursors[packet.source][id]=cursor;this.touches[packet.source][id]=touch;this.createTouchEvent("touchstart",touch)};Client.prototype.processObjectSet=function(packet,message){const id=message.sessionId.toString();if(this.objects[packet.source][id]!==undefined&&this.objects[packet.source][id].sessionId.toString()===id){this.objects[packet.source][id]=new TuioObject(message);if(this.touches[packet.source][id]!==undefined&&this.touches[packet.source][id].identifier.toString()===id){const touch=this.objects[packet.source][id].coherceToTouch();this.touches[packet.source][id]=touch;this.createTouchEvent("touchmove",touch);return}
return}
const tuioObject=new TuioObject(message);const touch=tuioObject.coherceToTouch();this.objects[packet.source][id]=tuioObject;this.touches[packet.source][id]=touch;this.createTouchEvent("touchstart",touch)};Client.prototype.processBlobSet=function(packet,message){const id=message.sessionId.toString();if(this.blobs[packet.source][id]!==undefined&&this.blobs[packet.source][id].sessionId.toString()===id){this.blobs[packet.source][id]=new TuioBlob(message);if(this.touches[packet.source][id]!==undefined&&this.touches[packet.source][id].identifier.toString()===id){const touch=this.blobs[packet.source][id].coherceToTouch();this.touches[packet.source][id]=touch;this.createTouchEvent("touchmove",touch);return}
return}
const blob=new TuioBlob(message);const touch=blob.coherceToTouch();this.blobs[packet.source][id]=blob;this.touches[packet.source][id]=touch;this.createTouchEvent("touchstart",touch)};Client.prototype.processFseq=function(packet,message){};Client.prototype.getCursor=function(sessionId){return this.cursors[sessionId]};Client.prototype.getObject=function(sessionId){return this.objects[sessionId]};Client.prototype.getBlob=function(sessionId){return this.blobs[sessionId]};Client.prototype.getCursors=function(){return this.cursors};Client.prototype.getObjects=function(){return this.objects};Client.prototype.getBlobs=function(){return this.blobs};Client.prototype.createTouchEvent=function(type,touch){const touches=[];for(let namespace in this.touches){for(let key in this.touches[namespace]){touches.push(this.touches[namespace][key])}}
const targetTouches=getTargetTouches(touch);const changedTouches=createTouchList(touch);const touchEvent=new TouchEvent(type,{touches,targetTouches,changedTouches});touchEvent.classId=touch.classId;if(touch.target){touch.target.dispatchEvent(touchEvent)}else{document.dispatchEvent(touchEvent)}};const TuioCursor=(Caress.TuioCursor=function TuioCursor(options){for(let key in options){this[key]=options[key]}});TuioCursor.prototype.coherceToTouch=function(){const identifier=this.sessionId;const clientX=window.innerWidth*this.xPosition;const clientY=window.innerHeight*this.yPosition;const pageX=document.documentElement.clientWidth*this.xPosition;const pageY=document.documentElement.clientHeight*this.yPosition;const target=document.elementFromPoint(pageX,pageY);const screenX=screen.width*this.xPosition;const screenY=screen.height*this.yPosition;const radiusX=this.radius;const radiusY=this.radius;const rotationAngle=this.rotationAngle;const force=this.force;return new Touch({target,identifier,clientX,clientY,pageX,pageY,screenX,screenY,radiusX,radiusY,rotationAngle,force})};const TuioObject=(Caress.TuioObject=function TuioObject(options){for(let key in options){this[key]=options[key]}});TuioObject.prototype.coherceToTouch=function(){const identifier=this.sessionId;const clientX=window.innerWidth*this.xPosition;const clientY=window.innerHeight*this.yPosition;const pageX=document.documentElement.clientWidth*this.xPosition;const pageY=document.documentElement.clientHeight*this.yPosition;const target=document.elementFromPoint(pageX,pageY);const screenX=screen.width*this.xPosition;const screenY=screen.height*this.yPosition;const radiusX=this.radius;const radiusY=this.radius;const rotationAngle=this.rotationAngle;const force=this.force;const touch=new Touch({target,identifier,clientX,clientY,pageX,pageY,screenX,screenY,radiusX,radiusY,rotationAngle,force});touch.classId=this.classId;return touch};const TuioBlob=(Caress.TuioBlob=function TuioBlob(options){for(let key in options){this[key]=options[key]}});TuioBlob.prototype.coherceToTouch=function(){const identifier=this.sessionId;const clientX=window.innerWidth*this.xPosition;const clientY=window.innerHeight*this.yPosition;const pageX=document.documentElement.clientWidth*this.xPosition;const pageY=document.documentElement.clientHeight*this.yPosition;const target=document.elementFromPoint(pageX,pageY);const screenX=screen.width*this.xPosition;const screenY=screen.height*this.yPosition;const radiusX=this.radius;const radiusY=this.radius;const rotationAngle=this.rotationAngle;const force=this.force;return new Touch({target,identifier,clientX,clientY,pageX,pageY,screenX,screenY,radiusX,radiusY,rotationAngle,force})};function getTargetTouches(touch){const targetTouches=createTouchList();for(let namespace in window.client.touches){for(let key in window.client.touches[namespace]){const currentTouch=window.client.touches[namespace][key];if(currentTouch.target==touch.target){targetTouches.push(currentTouch)}}}
return targetTouches}
function createTouchList(touches){return Array.isArray(touches)?touches:touches!==undefined?[touches]:[]}
window.ontouchstart=document.ontouchstart=null;window.ontouchend=document.ontouchend=null;window.ontouchmove=document.ontouchmove=null;window.ontouchcancel=document.ontouchcancel=null;window.ontouchenter=document.ontouchenter=null;window.ontouchleave=document.ontouchleave=null;return Caress})
